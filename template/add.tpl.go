// Code generated by hero.
// source: D:\GoProjects\dp_clean_core\template\add.tpl
// DO NOT EDIT!
package template

import (
	"bytes"

	"github.com/anden007/dp_clean_core/pkg"
	"github.com/shiyanhui/hero"
)

type AddOption struct {
	Api           bool
	ApiName       string
	CustomList    bool
	Dict          bool
	Password      bool
	Editor        bool
	Upload        bool
	UploadThumb   bool
	FileUpload    bool
	TotalRow      int
	RowNum        int
	Span          string
	LabelPosition string
	ModalWidth    string
}

func Add(fields []pkg.FormField, options AddOption, buffer *bytes.Buffer) {
	buffer.WriteString(`
<template>
  <div>
    <Card>
      <div slot="title">
        <div class="edit-head">
          <a @click="close" class="back-title">
            <Icon type="ios-arrow-back" />返回
          </a>
          <div class="head-name">添加</div>
          <span></span>
          <a @click="close" class="window-close">
            <Icon type="ios-close" size="31" class="ivu-icon-ios-close" />
          </a>
        </div>
      </div>
      <div style="width: `)
	buffer.WriteString(options.ModalWidth)
	buffer.WriteString(`px">
        <Form ref="form" :model="form" :rules="formValidate" `)
	if options.LabelPosition == "left" {
		buffer.WriteString(`:label-width="100"`)
	}
	buffer.WriteString(` label-position="`)
	buffer.WriteString(options.LabelPosition)
	buffer.WriteString(`">
          `)

	curr := 1
	for i := 0; i < options.TotalRow; i++ {

		if options.LabelPosition != "left" {
			buffer.WriteString(`
            <Row :gutter="32">
            `)
		}

		for j := 0; j < options.RowNum; j++ {
			if len(fields) == 0 || curr > len(fields) {
				break
			}
			item := fields[curr-1]
			for {
				if !item.Editable && curr < len(fields) {
					curr++
					item = fields[curr-1]
				} else {
					break
				}
			}
			curr++
			spanData := options.Span
			if item.Type == "editor" || item.Type == "textarea" {
				spanData = "24"
			}

			if options.LabelPosition != "left" {
				buffer.WriteString(`
            <Col span="`)
				buffer.WriteString(spanData)
				buffer.WriteString(`">
            `)
			}
			buffer.WriteString(`
              <FormItem label="`)
			buffer.WriteString(item.Name)
			buffer.WriteString(`" prop="`)
			buffer.WriteString(item.Field)
			buffer.WriteString(`" `)
			if item.Type == "upload" {
				buffer.WriteString(`class="form-noheight"`)
			}
			buffer.WriteString(`>
                `)

			if item.Type == "text" {

				buffer.WriteString(`
                <Input v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable/>
                `)

			}

			if item.Type == "textarea" {

				buffer.WriteString(`
                <Input v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" type="textarea" :rows="4" maxlength="250" show-word-limit/>
                `)

			}

			if item.Type == "select" {

				buffer.WriteString(`
                <Select v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable>
                  <Option value="0">请自行编辑下拉菜单</Option>
                </Select>
                `)

			}

			if item.Type == "switch" {

				buffer.WriteString(`
                <i-switch v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></i-switch>
                `)

			}

			if item.Type == "radio" {

				buffer.WriteString(`
                <RadioGroup v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
                  <Radio label="0">请自行编辑单选框</Radio>
                  <Radio label="1">请自行编辑单选框</Radio>
                </RadioGroup>
                `)

			}

			if item.Type == "number" {

				buffer.WriteString(`
                <InputNumber v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" style="width:100%"></InputNumber>
                `)

			}

			if item.Type == "date" {

				buffer.WriteString(`
                <DatePicker type="date" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable style="width: 100%"></DatePicker>
                `)

			}

			if item.Type == "datetime" {

				buffer.WriteString(`
                <DatePicker type="datetime" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable transfer style="width: 100%"></DatePicker>
                `)

			}

			if item.Type == "daterange" {

				buffer.WriteString(`
                <DatePicker type="daterange" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable style="width: 100%"></DatePicker>
                `)

			}

			if item.Type == "time" {

				buffer.WriteString(`
                <TimePicker type="time" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable style="width: 100%"></TimePicker>
                `)

			}

			if item.Type == "area" {

				buffer.WriteString(`
                <al-cascader v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" data-type="name" level="`)
				buffer.WriteString(item.Level)
				buffer.WriteString(`"/>
                `)

			}

			if item.Type == "slider" {

				buffer.WriteString(`
                <Slider v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></Slider>
                `)

			}

			if item.Type == "upload" {

				buffer.WriteString(`
                <upload-pic-input v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></upload-pic-input>
                `)

			}

			if item.Type == "uploadThumb" {

				buffer.WriteString(`
                <uploadThumb v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" multiple></uploadThumb>
                `)

			}

			if item.Type == "editor" {

				buffer.WriteString(`
                <editor id="editor-`)
				hero.FormatInt(int64(i), buffer)
				buffer.WriteString(`-`)
				hero.FormatInt(int64(j), buffer)
				buffer.WriteString(`" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></editor>
                `)

			}

			if item.Type == "password" {

				buffer.WriteString(`
                <password v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></password>
                `)

			}

			if item.Type == "dict" {

				buffer.WriteString(`
                <dict v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" dict="`)
				buffer.WriteString(item.DictType)
				buffer.WriteString(`" transfer></dict>
                `)

			}

			if item.Type == "customList" {

				buffer.WriteString(`
                <customList v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" url="`)
				buffer.WriteString(item.CustomUrl)
				buffer.WriteString(`" transfer></customList>
                `)

			}

			if item.Type == "fileUpload" {

				buffer.WriteString(`
                <fileUpload v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></fileUpload>
                `)

			}

			buffer.WriteString(`
              </FormItem>
            `)
			if options.LabelPosition != "left" {
				buffer.WriteString(`
            </Col>
            `)
			}

		}

		if options.LabelPosition != "left" {
			buffer.WriteString(`
          </Row>
          `)
		}

	}

	buffer.WriteString(`
          <FormItem class="br">
            <Button @click="handleSubmit" :loading="submitLoading" type="primary">提交并保存</Button>
            <Button @click="handleReset">重置</Button>
            <Button type="dashed" @click="close">关闭</Button>
          </FormItem>
        </Form>
      </div>
    </Card>
  </div>
</template>

<script>
`)

	if options.Api {

		buffer.WriteString(`
// 根据你的实际请求api.js位置路径修改
import { add`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(` } from "./api";
`)

	}

	if options.FileUpload {

		buffer.WriteString(`
import fileUpload from "@/views/my-components/xboot/file-upload";
`)

	}

	if options.Upload {

		buffer.WriteString(`
import uploadPicInput from "@/views/my-components/xboot/upload-pic-input";
`)

	}

	if options.UploadThumb {

		buffer.WriteString(`
import uploadThumb from "@/views/my-components/xboot/upload-pic-thumb";
`)

	}

	if options.Editor {

		buffer.WriteString(`
import editor from "@/views/my-components/xboot/editor";
`)

	}

	if options.Password {

		buffer.WriteString(`
import password from "@/views/my-components/xboot/set-password";
`)

	}

	if options.Dict {

		buffer.WriteString(`
import dict from "@/views/my-components/xboot/dict";
`)

	}

	if options.CustomList {

		buffer.WriteString(`
import customList from "@/views/my-components/xboot/custom-list";
`)

	}

	buffer.WriteString(`
export default {
  name: "add",
  components: {
  `)

	if options.FileUpload {

		buffer.WriteString(`
    fileUpload,
  `)

	}

	if options.Upload {

		buffer.WriteString(`
    uploadPicInput,
  `)

	}

	if options.UploadThumb {

		buffer.WriteString(`
    uploadThumb,
  `)

	}

	if options.Editor {

		buffer.WriteString(`
    editor,
  `)

	}

	if options.Password {

		buffer.WriteString(`
    password,
  `)

	}

	if options.Dict {

		buffer.WriteString(`
    dict,
  `)

	}

	if options.CustomList {

		buffer.WriteString(`
    customList,
  `)

	}

	buffer.WriteString(`
  },
  data() {
    return {
      submitLoading: false, // 表单提交状态
      form: { // 添加或编辑表单对象初始化数据
        `)

	for _, item := range fields {
		if item.Editable {

			if item.Type == "switch" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: true,
        `)
			} else if item.Type == "number" || item.Type == "slider" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: 0,
        `)
			} else if item.Type == "daterange" || item.Type == "area" || item.Type == "uploadThumb" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [],
        `)
			} else {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: "",
        `)
			}

		}
	}

	buffer.WriteString(`
      },
      // 表单验证规则
      formValidate: {
        `)

	for _, item := range fields {
		if item.Editable && item.Validate {

			if item.Type == "area" || item.Type == "uploadThumb" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "array", required: true, message: "不能为空", trigger: "change" }],
        `)
			} else if item.Type == "date" || item.Type == "datetime" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "date", required: true, message: "不能为空", trigger: "change" }],
        `)
			} else if item.Type == "daterange" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "array", required: true, trigger: "change", fields: { 0: { type: "date", message: "起始日期不能为空", required: true }, 1: { type: "date", message: "结束日期不能为空", required: true } }, }],
        `)
			} else if item.Type == "number" || item.Type == "slider" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "number", required: true, message: "不能为空", trigger: "change" }],
        `)
			} else if item.Type == "switch" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "boolean", required: true, message: "不能为空", trigger: "change" }],
        `)
			} else {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ required: true, message: "不能为空", trigger: "change" }],
        `)
			}

		}
	}

	buffer.WriteString(`
      }
    };
  },
  methods: {
    init() {},
    handleReset() {
      this.$refs.form.resetFields();
    },
    handleSubmit() {
      this.$refs.form.validate(valid => {
        if (valid) {
          `)

	for _, item := range fields {
		if item.Editable && item.Type == "date" {

			buffer.WriteString(`
          if (typeof this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(` == "object") {
            this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(` = this.format(this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(`, "yyyy-MM-dd HH:mm:ss");
          }
          `)

		} else if item.Editable && item.Type == "datetime" {

			buffer.WriteString(`
          if (typeof this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(` == "object") {
            this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(` = this.format(this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(`, "yyyy-MM-dd HH:mm:ss");
          }
          `)

		}
	}

	buffer.WriteString(`
          this.submitLoading = true;
          `)

	if options.Api {

		buffer.WriteString(`
          delete this.form.id;
          if('createTime' in this.form){
            delete this.form.createTime;
          }
          add`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(`(this.form).then(res => {
            this.submitLoading = false;
            if (res.success) {
              this.$Message.success("操作成功");
              this.submited();
            }
          });
          `)

	} else {

		buffer.WriteString(`
          // this.postRequest("请求路径", this.form).then(res => {
          //   this.submitLoading = false;
          //   if (res.success) {
          //     this.$Message.success("添加成功");
          //     this.submited();
          //   }
          // });
          // 模拟成功
          this.submitLoading = false;
          this.$Message.success("添加成功");
          this.submited();
          `)

	}

	buffer.WriteString(`
        }
      });
    },
    close() {
      this.$emit("close", true);
    },
    submited() {
      this.$emit("submited", true);
    }
  },
  mounted() {
    this.init();
  }
};
</script>
<style lang="less">
// 建议引入通用样式 具体路径自行修改 可删除下面样式代码
// @import "@/styles/single-common.less";
.edit-head {
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;

    .back-title {
        color: #515a6e;
        display: flex;
        align-items: center;
    }

    .head-name {
        display: inline-block;
        height: 20px;
        line-height: 20px;
        font-size: 16px;
        color: #17233d;
        font-weight: 500;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .window-close {
        z-index: 1;
        font-size: 12px;
        position: absolute;
        right: 0px;
        top: -5px;
        overflow: hidden;
        cursor: pointer;

        .ivu-icon-ios-close {
            color: #999;
            transition: color .2s ease;
        }
    }

    .window-close .ivu-icon-ios-close:hover {
        color: #444;
    }
}
</style>`)

}
