// Code generated by hero.
// source: D:\GoProjects\dp_clean_core\template\table.tpl
// DO NOT EDIT!
package template

import (
	"bytes"

	"github.com/anden007/dp_clean_core/pkg"
	"github.com/shiyanhui/hero"
)

type TableOption struct {
	RowNum           int
	SearchSize       int
	HideSearch       bool
	ModalWidth       string
	ApiName          string
	Upload           bool
	UploadThumb      bool
	DaterangeSearch  bool
	Password         bool
	VueName          string
	Api              bool
	DefaultSort      string
	DefaultSortType  string
	LabelPosition    string
	TotalRow         int
	Span             string
	FileUpload       bool
	Editor           bool
	Dict             bool
	SearchDict       bool
	CustomList       bool
	SearchCustomList bool
}

func Table(fields []pkg.FormField, firstTwo []pkg.FormField, rest []pkg.FormField, options TableOption, buffer *bytes.Buffer) {
	buffer.WriteString(`
<template>
  <div class="search">
    <Card>
      `)

	if options.SearchSize > 0 && !options.HideSearch {

		buffer.WriteString(`
      <Row v-show="openSearch" @keydown.enter.native="handleSearch">
        <Form ref="searchForm" :model="searchForm" inline :label-width="70">
        `)

		for _, item := range fields {
			if item.Searchable {

				if item.SearchType == "text" {

					buffer.WriteString(`
            <FormItem label="`)
					buffer.WriteString(item.Name)
					buffer.WriteString(`" prop="`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`">
              <Input type="text" v-model="searchForm.`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`.value" placeholder="请输入`)
					buffer.WriteString(item.Name)
					buffer.WriteString(`" clearable style="width: 200px">
                <Select
                  slot="prepend"
                  v-model="searchForm.`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`.comparator"
                  transfer
                  style="width: 80px"
                >
                  <Option
                    v-for="(item, i) in getSearchComparator('string')"
                    :value="item.value"
                    :key="i"
                    >{{ item.key }}</Option
                  >
                </Select>
              </Input>
            </FormItem>
            `)

				}

				if item.SearchType == "select" {

					buffer.WriteString(`
            <FormItem label="`)
					buffer.WriteString(item.Name)
					buffer.WriteString(`" prop="`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`">
              <Select v-model="searchForm.`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`.value" placeholder="请选择" clearable style="width: 200px">
                <Option value="0">请自行编辑下拉菜单</Option>
              </Select>
            </FormItem>
            `)

				}

				if item.SearchType == "date" {

					buffer.WriteString(`
            <FormItem label="`)
					buffer.WriteString(item.Name)
					buffer.WriteString(`" prop="`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`">
              <DatePicker type="date" v-model="searchForm.`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`.value" placeholder="请选择" clearable style="width: 200px"></DatePicker>
            </FormItem>
            `)

				}

				if item.SearchType == "daterange" {

					buffer.WriteString(`
            <FormItem label="`)
					buffer.WriteString(item.Name)
					buffer.WriteString(`" prop="`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`">
              <DatePicker :options="options" v-model="selectDate_`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`" type="daterange" format="yyyy-MM-dd" clearable @on-change="selectDateRange_`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`" placeholder="选择起始时间" style="width: 200px"></DatePicker>
            </FormItem>
            `)

				}

				if item.SearchType == "area" {

					buffer.WriteString(`
            <FormItem label="`)
					buffer.WriteString(item.Name)
					buffer.WriteString(`" prop="`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`">
              <al-cascader v-model="searchForm.`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`.value" data-type="name" level="`)
					buffer.WriteString(item.SearchLevel)
					buffer.WriteString(`" style="width:200px"/>
            </FormItem>
            `)

				}

				if item.SearchType == "dict" {

					buffer.WriteString(`
            <FormItem label="`)
					buffer.WriteString(item.Name)
					buffer.WriteString(`" prop="`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`">
              <dict v-model="searchForm.`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`.value" dict="`)
					buffer.WriteString(item.SearchDictType)
					buffer.WriteString(`" transfer style="width:200px"/>
            </FormItem>
            `)

				}

				if item.SearchType == "customList" {

					buffer.WriteString(`
            <FormItem label="`)
					buffer.WriteString(item.Name)
					buffer.WriteString(`" prop="`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`">
              <customList v-model="searchForm.`)
					buffer.WriteString(item.Field)
					buffer.WriteString(`.value" url="`)
					buffer.WriteString(item.SearchCustomUrl)
					buffer.WriteString(`" transfer style="width:200px"/>
            </FormItem>
            `)

				}

			}
		}

		buffer.WriteString(`
          <FormItem style="margin-left:-35px;" class="br">
            <Button @click="handleSearch" type="primary" icon="ios-search">搜索</Button>
            <Button @click="handleReset">重置</Button>
          </FormItem>
        </Form>
      </Row>
      `)

	}

	if options.SearchSize > 0 && options.HideSearch {

		buffer.WriteString(`
      <Row v-show="openSearch" @keydown.enter.native="handleSearch">
        <Form ref="searchForm" :model="searchForm" inline :label-width="70" class="search-form">
        `)

		for _, item := range firstTwo {

			if item.SearchType == "text" {

				buffer.WriteString(`
          <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
            <Input type="text" v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" placeholder="请输入`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" clearable style="width: 200px">
                <Select
                  slot="prepend"
                  v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.comparator"
                  transfer
                  style="width: 80px"
                >
                  <Option
                    v-for="(item, i) in getSearchComparator('string')"
                    :value="item.value"
                    :key="i"
                    >{{ item.key }}</Option
                  >
                </Select>
              </Input>
          </FormItem>
          `)

			}

			if item.SearchType == "select" {

				buffer.WriteString(`
          <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
            <Select v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" placeholder="请选择" clearable style="width: 200px">
              <Option value="0">请自行编辑下拉菜单</Option>
            </Select>
          </FormItem>
          `)

			}

			if item.SearchType == "date" {

				buffer.WriteString(`
          <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
            <DatePicker type="date" v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" placeholder="请选择" clearable style="width: 200px"></DatePicker>
          </FormItem>
          `)

			}

			if item.SearchType == "daterange" {

				buffer.WriteString(`
          <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
            <DatePicker :options="options" v-model="selectDate_`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" type="daterange" format="yyyy-MM-dd" clearable @on-change="selectDateRange_`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" placeholder="选择起始时间" style="width: 200px"></DatePicker>
          </FormItem>
          `)

			}

			if item.SearchType == "area" {

				buffer.WriteString(`
          <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
            <al-cascader v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" data-type="name" level="`)
				buffer.WriteString(item.SearchLevel)
				buffer.WriteString(`" style="width:200px"/>
          </FormItem>
          `)

			}

			if item.SearchType == "dict" {

				buffer.WriteString(`
          <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
            <dict v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" dict="`)
				buffer.WriteString(item.SearchDictType)
				buffer.WriteString(`" transfer style="width:200px"/>
          </FormItem>
          `)

			}

			if item.SearchType == "customList" {

				buffer.WriteString(`
          <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
            <customList v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" url="`)
				buffer.WriteString(item.SearchCustomUrl)
				buffer.WriteString(`" transfer style="width:200px"/>
          </FormItem>
          `)

			}

		}

		buffer.WriteString(`
          <span v-if="drop">
          `)

		for _, item := range rest {

			if item.SearchType == "text" {

				buffer.WriteString(`
            <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
              <Input type="text" v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" placeholder="请输入`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" clearable style="width: 200px"/>
            </FormItem>
            `)

			}

			if item.SearchType == "select" {

				buffer.WriteString(`
            <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
              <Select v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" placeholder="请选择" clearable style="width: 200px">
                <Option value="0">请自行编辑下拉菜单</Option>
              </Select>
            </FormItem>
            `)

			}

			if item.SearchType == "date" {

				buffer.WriteString(`
            <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
              <DatePicker type="date" v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" placeholder="请选择" clearable style="width: 200px"></DatePicker>
            </FormItem>
            `)

			}

			if item.SearchType == "daterange" {

				buffer.WriteString(`
            <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
              <DatePicker :options="options" v-model="selectDate_`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" type="daterange" format="yyyy-MM-dd" clearable @on-change="selectDateRange_`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" placeholder="选择起始时间" style="width: 200px"></DatePicker>
            </FormItem>
            `)

			}

			if item.SearchType == "area" {

				buffer.WriteString(`
            <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
              <al-cascader v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" data-type="name" level="`)
				buffer.WriteString(item.SearchLevel)
				buffer.WriteString(`" style="width:200px"/>
            </FormItem>
            `)

			}

			if item.SearchType == "dict" {

				buffer.WriteString(`
            <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
              <dict v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" dict="`)
				buffer.WriteString(item.SearchDictType)
				buffer.WriteString(`" transfer style="width:200px"/>
            </FormItem>
            `)

			}

			if item.SearchType == "customList" {

				buffer.WriteString(`
            <FormItem label="`)
				buffer.WriteString(item.Name)
				buffer.WriteString(`" prop="`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
              <customList v-model="searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value" url="`)
				buffer.WriteString(item.SearchCustomUrl)
				buffer.WriteString(`" transfer style="width:200px"/>
            </FormItem>
            `)

			}

		}

		buffer.WriteString(`
          </span>
          <FormItem style="margin-left:-35px;" class="br">
            <Button @click="handleSearch" type="primary" icon="ios-search">搜索</Button>
            <Button @click="handleReset">重置</Button>
            <a class="drop-down" @click="dropDown">
              {{dropDownContent}}
              <Icon :type="dropDownIcon"></Icon>
            </a>
          </FormItem>
        </Form>
      </Row>
      `)

	}

	buffer.WriteString(`
      <Row class="operation">
        <Button @click="add" type="primary" icon="md-add">添加</Button>
        <Button @click="delAll" icon="md-trash">批量删除</Button>
        <Button @click="getDataList" icon="md-refresh">刷新</Button>
        `)
	if options.SearchSize > 0 {
		buffer.WriteString(`
        <Button type="dashed" @click="openSearch=!openSearch">{{openSearch ? "关闭搜索" : "开启搜索"}}</Button>
        `)
	}
	buffer.WriteString(`
        <Button type="dashed" @click="openTip=!openTip">{{openTip ? "关闭提示" : "开启提示"}}</Button>
      </Row>
      <Alert show-icon v-show="openTip">
        已选择 <span class="select-count">{{selectList.length}}</span> 项
        <a class="select-clear" @click="clearSelectAll">清空</a>
      </Alert>
      <Table id="dataTable" :height="tableHeight" :loading="loading" border :columns="columns" :data="data" ref="table" sortable="custom" @on-sort-change="changeSort" @on-selection-change="changeSelect"></Table>
      <Row type="flex" justify="end" class="page">
        <Page :current="searchForm.pageNumber.value" :total="total" :page-size="searchForm.pageSize.value" @on-change="changePage" @on-page-size-change="changePageSize" :page-size-opts="[10,20,50]" size="small" show-total show-elevator show-sizer></Page>
      </Row>
    </Card>
    <Modal :title="modalTitle" v-model="modalVisible" :mask-closable='false' :width="`)
	buffer.WriteString(options.ModalWidth)
	buffer.WriteString(`">
      <Form ref="form" :model="form" :rules="formValidate" `)
	if options.LabelPosition == "left" {
		buffer.WriteString(`:label-width="100"`)
	}
	buffer.WriteString(` label-position="`)
	buffer.WriteString(options.LabelPosition)
	buffer.WriteString(`">
          `)

	curr := 1
	for i := 0; i < options.TotalRow; i++ {

		if options.LabelPosition != "left" {
			buffer.WriteString(`
            <Row :gutter="32">
            `)
		}

		for j := 0; j < options.RowNum; j++ {
			if len(fields) == 0 || curr > len(fields) {
				break
			}
			item := fields[curr-1]
			for {
				if !item.Editable && curr < len(fields) {
					curr++
					item = fields[curr-1]
				} else {
					break
				}
			}
			curr++
			spanData := options.Span
			if item.Type == "editor" || item.Type == "textarea" {
				spanData = "24"
			}

			if options.LabelPosition != "left" {
				buffer.WriteString(`
            <Col span="`)
				buffer.WriteString(spanData)
				buffer.WriteString(`">
            `)
			}
			buffer.WriteString(`
              <FormItem label="`)
			buffer.WriteString(item.Name)
			buffer.WriteString(`" prop="`)
			buffer.WriteString(item.Field)
			buffer.WriteString(`" `)
			if item.Type == "upload" {
				buffer.WriteString(`class="form-noheight"`)
			}
			buffer.WriteString(`>
                `)

			if item.Type == "text" {

				buffer.WriteString(`
                <Input v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable/>
                `)

			}

			if item.Type == "textarea" {

				buffer.WriteString(`
                <Input v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" type="textarea" :rows="4" maxlength="250" show-word-limit/>
                `)

			}

			if item.Type == "select" {

				buffer.WriteString(`
                <Select v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable>
                  <Option value="0">请自行编辑下拉菜单</Option>
                </Select>
                `)

			}

			if item.Type == "switch" {

				buffer.WriteString(`
                <i-switch v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></i-switch>
                `)

			}

			if item.Type == "radio" {

				buffer.WriteString(`
                <RadioGroup v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
                  <Radio label="0">请自行编辑单选框</Radio>
                  <Radio label="1">请自行编辑单选框</Radio>
                </RadioGroup>
                `)

			}

			if item.Type == "number" {

				buffer.WriteString(`
                <InputNumber v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" style="width:100%"></InputNumber>
                `)

			}

			if item.Type == "date" {

				buffer.WriteString(`
                <DatePicker type="date" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable style="width: 100%"></DatePicker>
                `)

			}

			if item.Type == "datetime" {

				buffer.WriteString(`
                <DatePicker type="datetime" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable transfer style="width: 100%"></DatePicker>
                `)

			}

			if item.Type == "daterange" {

				buffer.WriteString(`
                <DatePicker type="daterange" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable style="width: 100%"></DatePicker>
                `)

			}

			if item.Type == "time" {

				buffer.WriteString(`
                <TimePicker type="time" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable style="width: 100%"></TimePicker>
                `)

			}

			if item.Type == "area" {

				buffer.WriteString(`
                <al-cascader v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" data-type="name" level="`)
				buffer.WriteString(item.Level)
				buffer.WriteString(`"/>
                `)

			}

			if item.Type == "slider" {

				buffer.WriteString(`
                <Slider v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></Slider>
                `)

			}

			if item.Type == "upload" {

				buffer.WriteString(`
                <upload-pic-input v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></upload-pic-input>
                `)

			}

			if item.Type == "uploadThumb" {

				buffer.WriteString(`
                <uploadThumb v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" multiple></uploadThumb>
                `)

			}

			if item.Type == "editor" {

				buffer.WriteString(`
                <editor id="editor-`)
				hero.FormatInt(int64(i), buffer)
				buffer.WriteString(`-`)
				hero.FormatInt(int64(j), buffer)
				buffer.WriteString(`" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></editor>
                `)

			}

			if item.Type == "password" {

				buffer.WriteString(`
                <password v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></password>
                `)

			}

			if item.Type == "dict" {

				buffer.WriteString(`
                <dict v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" dict="`)
				buffer.WriteString(item.DictType)
				buffer.WriteString(`" transfer></dict>
                `)

			}

			if item.Type == "customList" {

				buffer.WriteString(`
                <customList v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" url="`)
				buffer.WriteString(item.CustomUrl)
				buffer.WriteString(`" transfer></customList>
                `)

			}

			if item.Type == "fileUpload" {

				buffer.WriteString(`
                <fileUpload v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></fileUpload>
                `)

			}

			buffer.WriteString(`
              </FormItem>
            `)
			if options.LabelPosition != "left" {
				buffer.WriteString(`
            </Col>
            `)
			}

		}

		if options.LabelPosition != "left" {
			buffer.WriteString(`
          </Row>
          `)
		}

	}

	buffer.WriteString(`
        </Form>
      <div slot="footer">
        <Button type="text" @click="modalVisible=false">取消</Button>
        <Button type="primary" :loading="submitLoading" @click="handleSubmit">提交</Button>
      </div>
    </Modal>
  </div>
</template>

<script>
`)

	if options.Api {

		buffer.WriteString(`
// 根据你的实际请求api.js位置路径修改
import { get`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(`List, add`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(`, edit`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(`, delete`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(` } from "./api";
`)

	}

	if options.FileUpload {

		buffer.WriteString(`
import fileUpload from "@/views/my-components/xboot/file-upload";
`)

	}

	if options.Upload {

		buffer.WriteString(`
import uploadPicInput from "@/views/my-components/xboot/upload-pic-input";
`)

	}

	if options.UploadThumb {

		buffer.WriteString(`
import uploadThumb from "@/views/my-components/xboot/upload-pic-thumb";
`)

	}

	if options.Editor {

		buffer.WriteString(`
import editor from "@/views/my-components/xboot/editor";
`)

	}

	if options.Password {

		buffer.WriteString(`
import password from "@/views/my-components/xboot/set-password";
`)

	}

	if options.Dict || options.SearchDict {

		buffer.WriteString(`
import dict from "@/views/my-components/xboot/dict";
`)

	}

	if options.CustomList || options.SearchCustomList {

		buffer.WriteString(`
import customList from "@/views/my-components/xboot/custom-list";
`)

	}

	buffer.WriteString(`
import { shortcuts } from "@/libs/shortcuts";
export default {
  name: "`)
	buffer.WriteString(options.VueName)
	buffer.WriteString(`",
  components: {
    `)

	if options.FileUpload {

		buffer.WriteString(`
    fileUpload,
    `)

	}

	if options.Upload {

		buffer.WriteString(`
    uploadPicInput,
    `)

	}

	if options.UploadThumb {

		buffer.WriteString(`
    uploadThumb,
    `)

	}

	if options.Editor {

		buffer.WriteString(`
    editor,
    `)

	}

	if options.Password {

		buffer.WriteString(`
    password,
    `)

	}

	if options.Dict || options.SearchDict {

		buffer.WriteString(`
    dict,
    `)

	}

	if options.CustomList || options.SearchCustomList {

		buffer.WriteString(`
    customList,
    `)

	}

	buffer.WriteString(`
  },
  data() {
    return {
      `)
	if options.SearchSize > 0 {
		buffer.WriteString(`
      openSearch: true, // 显示搜索
      `)
	}
	buffer.WriteString(`
      openTip: true, // 显示提示
      loading: true, // 表单加载状态
      modalType: 0, // 添加或编辑标识
      modalVisible: false, // 添加或编辑显示
      modalTitle: "", // 添加或编辑标题
      `)
	if options.HideSearch {
		buffer.WriteString(`
      drop: false,
      dropDownContent: "展开",
      dropDownIcon: "ios-arrow-down",
      `)
	}
	buffer.WriteString(`
      initSearchForm: {},
      searchForm: { // 搜索框初始化对象
        pageNumber: { value: 1 }, // 当前页数
        pageSize: { value: 10 }, // 页面大小
        `)
	if options.DefaultSort != "" {
		buffer.WriteString(`
        sort: { value: "`)
		buffer.WriteString(options.DefaultSort)
		buffer.WriteString(`" }, // 默认排序字段
        order: { value: "`)
		buffer.WriteString(options.DefaultSortType)
		buffer.WriteString(`" }, // 默认排序方式
        `)
	}

	for _, item := range fields {

		buffer.WriteString(item.Field)
		buffer.WriteString(`: { comparator: "==", value: "" },
        `)

	}

	buffer.WriteString(`
      },
      `)
	if options.DaterangeSearch {
		for _, item := range fields {
			if item.Searchable && item.SearchType == "daterange" {

				buffer.WriteString(`
      selectDate_`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`: null,
      `)
			}
		}
		buffer.WriteString(`
      options: {
        shortcuts: shortcuts,
      },
      `)
	}
	buffer.WriteString(`
      form: { // 添加或编辑表单对象初始化数据
        `)

	for _, item := range fields {
		if item.Editable {

			if item.Type == "switch" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: true,
        `)
			} else if item.Type == "number" || item.Type == "slider" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: 0,
        `)
			} else if item.Type == "daterange" || item.Type == "area" || item.Type == "uploadThumb" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [],
        `)
			} else {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: "",
        `)
			}

		}
	}

	buffer.WriteString(`
      },
      // 表单验证规则
      formValidate: {
        `)

	for _, item := range fields {
		if item.Editable && item.Validate {

			if item.Type == "area" || item.Type == "uploadThumb" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "array", required: true, message: "不能为空", trigger: "change" }],
        `)
			} else if item.Type == "date" || item.Type == "datetime" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "date", required: true, message: "不能为空", trigger: "change" }],
        `)
			} else if item.Type == "daterange" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "array", required: true, trigger: "change", fields: { 0: { type: "date", message: "起始日期不能为空", required: true }, 1: { type: "date", message: "结束日期不能为空", required: true } }, }],
        `)
			} else if item.Type == "number" || item.Type == "slider" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "number", required: true, message: "不能为空", trigger: "change" }],
        `)
			} else if item.Type == "switch" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "boolean", required: true, message: "不能为空", trigger: "change" }],
        `)
			} else {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ required: true, message: "不能为空", trigger: "change" }],
        `)
			}

		}
	}

	buffer.WriteString(`
      },
      submitLoading: false, // 添加或编辑提交状态
      selectList: [], // 多选数据
      columns: [
        // 表头
        {
          type: "selection",
          width: 60,
          align: "center"
        },
        {
          type: "index",
          width: 60,
          align: "center"
        },
        `)

	for _, item := range fields {
		if item.TableShow {

			buffer.WriteString(`
        {
          title: "`)
			buffer.WriteString(item.Name)
			buffer.WriteString(`",
          key: "`)
			buffer.WriteString(item.Field)
			buffer.WriteString(`",
          width: 150,
          `)

			if item.Sortable {

				buffer.WriteString(`
          sortable: true,
          `)

			} else {

				buffer.WriteString(`
          sortable: false,
          `)

			}

			if item.DefaultSort {

				buffer.WriteString(`
          sortType: "`)
				buffer.WriteString(item.DefaultSortType)
				buffer.WriteString(`"
          `)

			}

			buffer.WriteString(`
        },
        `)

		}
	}

	buffer.WriteString(`
        {
          title: "操作",
          key: "action",
          align: "center",
          width: 150,
          fixed: "right",
          render: (h, params) => {
            return h("div", [
              h(
                "a",
                {
                  on: {
                    click: () => {
                      this.edit(params.row);
                    }
                  }
                },
                "编辑"
              ),
              h("Divider", {
                props: {
                  type: "vertical",
                },
              }),
              h(
                "a",
                {
                  on: {
                    click: () => {
                      this.remove(params.row);
                    }
                  }
                },
                "删除"
              )
            ]);
          }
        }
      ],
      data: [], // 表单数据
      total: 0, // 表单数据总数
      tableHeight: 300,
    };
  },
  methods: {
    init() {
      this.initSearchForm = JSON.parse(JSON.stringify( this.searchForm ));
      this.getDataList();
      this.tableHeight = this.getTableHeight("#dataTable")
    },
    changePage(v) {
      this.searchForm.pageNumber.value = v;
      this.getDataList();
      this.clearSelectAll();
    },
    changePageSize(v) {
      this.searchForm.pageSize.value = v;
      this.getDataList();
    },
    `)
	if options.SearchSize > 0 {
		buffer.WriteString(`
    handleSearch() {
      this.searchForm.pageNumber.value = 1;
      // this.searchForm.pageSize.value = 10;
      this.getDataList();
    },
    `)
	}
	buffer.WriteString(`
    handleReset() {
      this.searchForm = JSON.parse(JSON.stringify( this.initSearchForm ));
      `)
	if options.DaterangeSearch {
		for _, item := range fields {
			if item.Searchable && item.SearchType == "daterange" {

				buffer.WriteString(`
      this.selectDate_`)
				buffer.WriteString(item.Field)
				buffer.WriteString(` = null;
      `)
			}
		}
	}
	buffer.WriteString(`
      // 重新加载数据
      this.getDataList();
    },
    changeSort(e) {
      this.searchForm.sort.value = e.key;
      this.searchForm.order.value = e.order;
      if (e.order === "normal") {
        this.searchForm.order.value = "";
      }
      this.getDataList();
    },
    clearSelectAll() {
      this.$refs.table.selectAll(false);
    },
    changeSelect(e) {
      this.selectList = e;
    },
    `)
	if options.DaterangeSearch {
		for _, item := range fields {
			if item.Searchable && item.SearchType == "daterange" {

				buffer.WriteString(`
    selectDateRange_`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`(v) {
      if (v) {
        this.searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.comparator = "between";
        this.searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value = v[0] + " 00:00:00";
        this.searchForm.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`.value2 = v[1] + " 23:59:59";
      }
    },
    `)
			}
		}
	}
	if options.HideSearch {
		buffer.WriteString(`
    dropDown() {
      if (this.drop) {
        this.dropDownContent = "展开";
        this.dropDownIcon = "ios-arrow-down";
      } else {
        this.dropDownContent = "收起";
        this.dropDownIcon = "ios-arrow-up";
      }
      this.drop = !this.drop;
    },
    `)
	}
	buffer.WriteString(`
    getDataList() {
      this.loading = true;
      `)

	if options.Api {

		buffer.WriteString(`
      get`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(`List(this.searchForm).then(res => {
        this.loading = false;
        if (res.success) {
          if(res.result.content){
            this.data = res.result.content;
            this.total = res.result.totalElements;
          }else{
            this.data = [];
            this.total = 0;
          }
          if (this.data.length == 0 && this.searchForm.pageNumber.value > 1) {
            this.searchForm.pageNumber.value = 0;
            this.getDataList();
          }
        }
      });
      `)

	} else {

		buffer.WriteString(`
      // 带多条件搜索参数获取表单数据 请自行修改接口
      // this.getRequest("请求路径", this.searchForm).then(res => {
      //   this.loading = false;
      //   if (res.success) {
      //     if(res.result.content){
      //       this.data = res.result.content;
      //       this.total = res.result.totalElements;
      //     }else{
      //       this.data = [];
      //       this.total = 0;
      //     }
      //     if (this.data.length == 0 && this.searchForm.pageNumber.value > 1) {
      //       this.searchForm.pageNumber.value = 0;
      //       this.getDataList();
      //     }
      //   }
      // });
      // 以下为模拟数据
      //this.data = [
      //];
      this.total = this.data.length;
      this.loading = false;
      `)

	}

	buffer.WriteString(`
    },
    handleSubmit() {
      this.$refs.form.validate(valid => {
        if (valid) {
          `)

	for _, item := range fields {
		if item.Editable && item.Type == "date" {

			buffer.WriteString(`
          if (typeof this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(` == "object") {
            this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(` = this.format(this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(`, "yyyy-MM-dd HH:mm:ss");
          }
          `)

		} else if item.Editable && item.Type == "datetime" {

			buffer.WriteString(`
          if (typeof this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(` == "object") {
            this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(` = this.format(this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(`, "yyyy-MM-dd HH:mm:ss");
          }
          `)

		}
	}

	buffer.WriteString(`
          this.submitLoading = true;
          if (this.modalType === 0) {
            // 添加 避免编辑后传入id等数据 记得删除
            delete this.form.id;
            if('createTime' in this.form){
              delete this.form.createTime;
            }
            `)

	if options.Api {

		buffer.WriteString(`
            add`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(`(this.form).then(res => {
              this.submitLoading = false;
              if (res.success) {
                this.$Message.success("操作成功");
                this.getDataList();
                this.modalVisible = false;
              }
            });
            `)

	} else {

		buffer.WriteString(`
            // this.postRequest("请求地址", this.form).then(res => {
            //   this.submitLoading = false;
            //   if (res.success) {
            //     this.$Message.success("操作成功");
            //     this.getDataList();
            //     this.modalVisible = false;
            //   }
            // });
            // 模拟请求成功
            this.submitLoading = false;
            this.$Message.success("操作成功");
            this.getDataList();
            this.modalVisible = false;
            `)

	}

	buffer.WriteString(`
          } else {
            // 编辑
            `)

	if options.Api {

		buffer.WriteString(`
            edit`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(`(this.form).then(res => {
              this.submitLoading = false;
              if (res.success) {
                this.$Message.success("操作成功");
                this.getDataList();
                this.modalVisible = false;
              }
            });
            `)

	} else {

		buffer.WriteString(`
            // this.postRequest("请求地址", this.form).then(res => {
            //   this.submitLoading = false;
            //   if (res.success) {
            //     this.$Message.success("操作成功");
            //     this.getDataList();
            //     this.modalVisible = false;
            //   }
            // });
            // 模拟请求成功
            this.submitLoading = false;
            this.$Message.success("操作成功");
            this.getDataList();
            this.modalVisible = false;
            `)

	}

	buffer.WriteString(`
          }
        }
      });
    },
    add() {
      this.modalType = 0;
      this.modalTitle = "添加";
      this.$refs.form.resetFields();
      delete this.form.id;
      this.modalVisible = true;
    },
    edit(v) {
      this.modalType = 1;
      this.modalTitle = "编辑";
      this.$refs.form.resetFields();
      // 转换null为""
      for (let attr in v) {
        if (v[attr] === null) {
          v[attr] = "";
        }
      }
      let str = JSON.stringify(v);
      let data = JSON.parse(str);
      this.form = data;
      this.modalVisible = true;
    },
    remove(v) {
      this.$Modal.confirm({
        title: "确认删除",
        // 记得确认修改此处
        content: "您确认要删除该条数据?",
        loading: true,
        onOk: () => {
          // 删除
          `)

	if options.Api {

		buffer.WriteString(`
          delete`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(`({ids: v.id}).then(res => {
            this.$Modal.remove();
            if (res.success) {
              this.$Message.success("操作成功");
              this.clearSelectAll();
              this.getDataList();
            }
          });
          `)

	} else {

		buffer.WriteString(`
          // this.deleteRequest("请求地址，如/deleteByIds/" + v.id).then(res => {
          //   this.$Modal.remove();
          //   if (res.success) {
          //     this.$Message.success("操作成功");
          //     this.clearSelectAll();
          //     this.getDataList();
          //   }
          // });
          // 模拟请求成功
          this.$Message.success("操作成功");
          this.clearSelectAll();
          this.$Modal.remove();
          this.getDataList();
          `)

	}

	buffer.WriteString(`
        }
      });
    },
    delAll() {
      if (this.selectList.length <= 0) {
        this.$Message.warning("您还未选择要删除的数据");
        return;
      }
      this.$Modal.confirm({
        title: "确认删除",
        content: "您确认要删除所选的 " + this.selectList.length + " 条数据?",
        loading: true,
        onOk: () => {
          let ids = "";
          this.selectList.forEach(function(e) {
            ids += e.id + ",";
          });
          ids = ids.substring(0, ids.length - 1);
          // 批量删除
          `)

	if options.Api {

		buffer.WriteString(`
          delete`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(`({ids: ids}).then(res => {
            this.$Modal.remove();
            if (res.success) {
              this.$Message.success("操作成功");
              this.clearSelectAll();
              this.getDataList();
            }
          });
          `)

	} else {

		buffer.WriteString(`
          // this.deleteRequest("请求地址，如/deleteByIds/" + ids).then(res => {
          //   this.$Modal.remove();
          //   if (res.success) {
          //     this.$Message.success("操作成功");
          //     this.clearSelectAll();
          //     this.getDataList();
          //   }
          // });
          // 模拟请求成功
          this.$Message.success("操作成功");
          this.$Modal.remove();
          this.clearSelectAll();
          this.getDataList();
          `)

	}

	buffer.WriteString(`
        }
      });
    }
  },
  mounted() {
    this.init();
  }
};
</script>
<style lang="less">
// 建议引入通用样式 具体路径自行修改 可删除下面样式代码
// @import "@/styles/table-common.less";
.search {
    .operation {
        margin-bottom: 2vh;
    }
    .select-count {
        font-weight: 600;
        color: #40a9ff;
    }
    .select-clear {
        margin-left: 10px;
    }
    .page {
        margin-top: 2vh;
    }
    .drop-down {
        margin-left: 5px;
    }
}
</style>`)

}
